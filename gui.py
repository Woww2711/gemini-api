# File: gui.py

import gradio as gr
import requests
import json
import os
from datetime import datetime

# --- Configuration ---
API_URL = "http://127.0.0.1:8000"
os.makedirs("temp_downloads", exist_ok=True)

# --- NEW: Mapping Dictionaries for Vietnamese UI ---
# Maps Vietnamese UI text to the English values the API expects.

LENGTH_MAP_VI = {
    "Ng·∫Øn": "Short",
    "Trung b√¨nh": "Medium",
    "Chi ti·∫øt": "Detailed",
}

TONE_MAP_VI = {
    "Chuy√™n nghi·ªáp": "Professional",
    "Th√¢n m·∫≠t": "Casual",
    "ƒê∆°n gi·∫£n": "Simple, for a general audience",
    "K·ªπ thu·∫≠t": "Technical, for an expert audience",
}

# --- Helper to create a unique filename ---
def get_download_path(extension):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return os.path.join("temp_downloads", f"ketqua_{timestamp}.{extension}")

# --- API Client Functions (Updated to use mapping dictionaries) ---

def process_request(endpoint, params, payload=None, files=None):
    try:
        if files:
            files_to_upload = [('files', (os.path.basename(f.name), open(f.name, 'rb'), 'application/pdf')) for f in payload]
            response = requests.post(endpoint, params=params, files=files_to_upload, data={"custom_prompt": params.get("custom_prompt", "")})
            for _, (_, file_handle, _) in files_to_upload:
                file_handle.close()
        elif 'url' in payload or 'text' in payload:
             response = requests.post(endpoint, params=params, data=payload)
        else:
            response = requests.post(endpoint, params=params, json=payload)

        response.raise_for_status()
        output_format = params.get("output_format")

        json_visible, md_visible, file_visible = False, False, False
        title_val, summary_val, md_val, file_val, usage_val = "", "", "", None, ""

        if output_format == 'json':
            json_visible = True
            data = response.json()
            title_val, summary_val = data.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'), data.get('summary', 'Kh√¥ng c√≥ t√≥m t·∫Øt')
            usage_val = f"Th√¥ng tin s·ª≠ d·ª•ng: {data.get('usage')}"
        
        else:
            # --- NEW: Logic to extract usage info from headers for all other formats ---
            file_visible = True
            prompt_tokens = response.headers.get("X-Prompt-Tokens", "N/A")
            candidates_tokens = response.headers.get("X-Candidates-Tokens", "N/A")
            total_tokens = response.headers.get("X-Total-Tokens", "N/A")
            usage_val = f"Th√¥ng tin s·ª≠ d·ª•ng: {{'prompt_token_count': {prompt_tokens}, 'candidates_token_count': {candidates_tokens}, 'total_token_count': {total_tokens}}}"
            
            file_path = get_download_path(output_format)
            if output_format in ['markdown', 'text']:
                if output_format == 'markdown':
                    md_visible = True
                    title_val = "Xem tr∆∞·ªõc Markdown & T·∫£i v·ªÅ"
                    md_val = response.text
                else:
                    json_visible = True
                    title_val = "Xem tr∆∞·ªõc Text & T·∫£i v·ªÅ"
                    summary_val = response.text
                with open(file_path, 'w', encoding='utf-8') as f: f.write(response.text)
            else: # pdf or docx
                title_val = f"T·ªáp {output_format.upper()} ƒë√£ s·∫µn s√†ng"
                with open(file_path, 'wb') as f: f.write(response.content)
            file_val = file_path

        return (
            gr.update(value=title_val), 
            gr.update(value=summary_val, visible=json_visible),
            gr.update(value=md_val, visible=md_visible), 
            gr.update(value=file_val, visible=file_visible),
            gr.update(value=usage_val)
        )
    except requests.exceptions.RequestException as e:
        try: detail = e.response.json().get('detail'); error_msg = f"L·ªói API: {detail}"
        except: error_msg = f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API: {e}"
        return gr.update(value="L·ªói"), gr.update(value=error_msg, visible=True), gr.update(visible=False), gr.update(visible=False), gr.update(value="L·ªói")


def summarize_url_from_gui(url, length_ui, tone_ui, output_format, custom_prompt):
    if not url or not url.strip():
        return "L·ªói", gr.update(value="Vui l√≤ng nh·∫≠p m·ªôt URL.", visible=True), gr.update(visible=False), gr.update(visible=False), gr.update(value="Y√™u c·∫ßu b·ªã h·ªßy")
    endpoint, api_length, api_tone = f"{API_URL}/summarize/url", LENGTH_MAP_VI.get(length_ui), TONE_MAP_VI.get(tone_ui)
    params = {"length": api_length, "tone": api_tone, "output_format": output_format}
    payload = {"url": url, "custom_prompt": custom_prompt or ""}
    return process_request(endpoint, params, payload=payload)

def summarize_paste_from_gui(text, length_ui, tone_ui, output_format, custom_prompt):
    if not text or not text.strip():
        return "L·ªói", gr.update(value="Vui l√≤ng nh·∫≠p ho·∫∑c d√°n vƒÉn b·∫£n v√†o √¥.", visible=True), gr.update(visible=False), gr.update(visible=False), gr.update(value="Y√™u c·∫ßu b·ªã h·ªßy")
    endpoint, api_length, api_tone = f"{API_URL}/summarize/paste", LENGTH_MAP_VI.get(length_ui), TONE_MAP_VI.get(tone_ui)
    params = {"length": api_length, "tone": api_tone, "output_format": output_format}
    payload = {"text": text, "custom_prompt": custom_prompt or ""}
    return process_request(endpoint, params, payload=payload)

def summarize_files_from_gui(files, length_ui, tone_ui, output_format, custom_prompt):
    if not files:
        return "L·ªói", gr.update(value="Ch∆∞a c√≥ t·ªáp n√†o ƒë∆∞·ª£c t·∫£i l√™n. Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt t·ªáp PDF.", visible=True), gr.update(visible=False), gr.update(visible=False), gr.update(value="Y√™u c·∫ßu b·ªã h·ªßy")
    endpoint, api_length, api_tone = f"{API_URL}/summarize/pdf/upload", LENGTH_MAP_VI.get(length_ui), TONE_MAP_VI.get(tone_ui)
    params = {"length": api_length, "tone": api_tone, "output_format": output_format, "custom_prompt": custom_prompt or ""}
    return process_request(endpoint, params, payload=files, files=True)


# --- Gradio UI Definition (Translated to Vietnamese) ---
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("# ü§ñ B·ªô X·ª≠ l√Ω N·ªôi dung Gemini")
    gr.Markdown("Giao di·ªán ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra v√† ƒë√°nh gi√° API. S·ª≠ d·ª•ng tr∆∞·ªùng 'Y√™u c·∫ßu T√πy ch·ªânh' cho c√°c t√°c v·ª• kh√°c ngo√†i t√≥m t·∫Øt.")
    
    with gr.Tabs():
        with gr.TabItem("X·ª≠ l√Ω t·ª´ URL"):
            url_input=gr.Textbox(label="URL", placeholder="Nh·∫≠p URL c·ªßa trang web ho·∫∑c t·ªáp PDF...")
            custom_prompt_url=gr.Textbox(label="Y√™u c·∫ßu T√πy ch·ªânh (T√πy ch·ªçn)", placeholder="ƒê·ªÉ tr·ªëng n·∫øu mu·ªën t√≥m t·∫Øt, ho·∫∑c nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n...")
            with gr.Row():
                length_input_url=gr.Dropdown(list(LENGTH_MAP_VI.keys()), label="ƒê·ªô d√†i", value="Ng·∫Øn")
                tone_input_url=gr.Dropdown(list(TONE_MAP_VI.keys()), label="Phong c√°ch", value="ƒê∆°n gi·∫£n")
            with gr.Row():
                format_input_url=gr.Dropdown(["json", "text", "markdown", "pdf", "docx"], label="ƒê·ªãnh d·∫°ng ƒê·∫ßu ra", value="json")
            url_button=gr.Button("X·ª≠ l√Ω URL", variant="primary")
            
        with gr.TabItem("X·ª≠ l√Ω t·ª´ VƒÉn b·∫£n"):
            paste_input=gr.Textbox(label="VƒÉn b·∫£n ƒë∆∞·ª£c d√°n", placeholder="D√°n vƒÉn b·∫£n c·ªßa b·∫°n v√†o ƒë√¢y...", lines=10)
            custom_prompt_paste=gr.Textbox(label="Y√™u c·∫ßu T√πy ch·ªânh (T√πy ch·ªçn)", placeholder="ƒê·ªÉ tr·ªëng n·∫øu mu·ªën t√≥m t·∫Øt, ho·∫∑c nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n...")
            with gr.Row():
                length_input_paste=gr.Dropdown(list(LENGTH_MAP_VI.keys()), label="ƒê·ªô d√†i", value="Ng·∫Øn")
                tone_input_paste=gr.Dropdown(list(TONE_MAP_VI.keys()), label="Phong c√°ch", value="ƒê∆°n gi·∫£n")
            with gr.Row():
                format_input_paste=gr.Dropdown(["json", "text", "markdown", "pdf", "docx"], label="ƒê·ªãnh d·∫°ng ƒê·∫ßu ra", value="json")
            paste_button=gr.Button("X·ª≠ l√Ω VƒÉn b·∫£n", variant="primary")

        with gr.TabItem("X·ª≠ l√Ω t·ª´ T·ªáp"):
            file_input=gr.File(label="T·∫£i l√™n t·ªáp PDF", file_count="multiple", file_types=[".pdf"])
            custom_prompt_file=gr.Textbox(label="Y√™u c·∫ßu T√πy ch·ªânh (T√πy ch·ªçn)", placeholder="ƒê·ªÉ tr·ªëng n·∫øu mu·ªën t√≥m t·∫Øt, ho·∫∑c nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n...")
            with gr.Row():
                length_input_file=gr.Dropdown(list(LENGTH_MAP_VI.keys()), label="ƒê·ªô d√†i", value="Ng·∫Øn")
                tone_input_file=gr.Dropdown(list(TONE_MAP_VI.keys()), label="Phong c√°ch", value="ƒê∆°n gi·∫£n")
            with gr.Row():
                format_input_file=gr.Dropdown(["json", "text", "markdown", "pdf", "docx"], label="ƒê·ªãnh d·∫°ng ƒê·∫ßu ra", value="json")
            file_button=gr.Button("X·ª≠ l√Ω T·ªáp", variant="primary")
            
    gr.Markdown("---"); gr.Markdown("## üìù K·∫øt qu·∫£")
    title_output=gr.Textbox(label="Ti√™u ƒë·ªÅ")
    json_summary_output=gr.Textbox(label="T√≥m t·∫Øt / K·∫øt qu·∫£", lines=15, visible=True)
    md_preview_output=gr.Markdown(label="Xem tr∆∞·ªõc Markdown", visible=False)
    download_output=gr.File(label="T·∫£i v·ªÅ T·ªáp", visible=False)
    usage_output=gr.Textbox(label="Th√¥ng tin S·ª≠ d·ª•ng")
    
    outputs_list=[title_output, json_summary_output, md_preview_output, download_output, usage_output]

    url_button.click(fn=summarize_url_from_gui, inputs=[url_input, length_input_url, tone_input_url, format_input_url, custom_prompt_url], outputs=outputs_list)
    paste_button.click(fn=summarize_paste_from_gui, inputs=[paste_input, length_input_paste, tone_input_paste, format_input_paste, custom_prompt_paste], outputs=outputs_list)
    file_button.click(fn=summarize_files_from_gui, inputs=[file_input, length_input_file, tone_input_file, format_input_file, custom_prompt_file], outputs=outputs_list)

if __name__ == "__main__":
    demo.launch()